% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/models_reg.R
\name{train_quali_models}
\alias{train_quali_models}
\title{Train Qualifying Prediction Models}
\usage{
train_quali_models(data, use_practice_data = FALSE, engine = "ranger")
}
\arguments{
\item{data}{A data frame containing the modeling data.}

\item{use_practice_data}{A logical value. If `TRUE`, includes practice session
performance metrics as predictors ("late" model). If `FALSE` (default),
it uses data available before practice sessions ("early" model).}

\item{engine}{A character string specifying the model engine. One of `"ranger"`
(default), `"glmnet"`, `"nnet"`, `"kernlab"`, or `"kknn"`.}
}
\value{
A list containing two fitted `workflow` objects: `quali_pole` and `quali_pos`.
}
\description{
This function trains two classification models to predict qualifying results.
It can be configured to use data from before ("early") or after ("late")
practice sessions have occurred.

The function produces:
1. A binary classification model (`quali_pole`) to predict if a driver will
   achieve pole position.
2. A multiclass classification model (`quali_pos`) to predict a driver's exact
   qualifying position (1-20).
}
\details{
The function first filters the input data to include seasons from 2018
onwards. Both models are built using the specified engine. Hyperparameters
are tuned via `tune::tune_grid()` with a grid search. For the `ranger`,
`glmnet`, and `nnet` engines, this is a regular grid.

The function first filters the input data to include seasons from 2018 onwards.

The pole position model is optimized by selecting the best model based on the
`mn_log_loss` metric. The qualifying position model is optimized based on the
`kap` (Cohen's Kappa) metric.

Upon completion, the function prints the final performance metrics of each
model (log loss, accuracy, AUC, etc.) to the console.
}
